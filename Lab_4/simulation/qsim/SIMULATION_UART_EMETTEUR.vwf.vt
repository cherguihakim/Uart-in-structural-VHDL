// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2023 16:44:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UART_EMETTEUR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UART_EMETTEUR_vlg_sample_tst(
	data_8bits,
	i_clock,
	i_resetBar,
	load_contoleur_emetteur,
	load_RTD,
	sampler_tx
);
input [7:0] data_8bits;
input  i_clock;
input  i_resetBar;
input  load_contoleur_emetteur;
input  load_RTD;
output sampler_tx;

reg sample;
time current_time;
always @(data_8bits or i_clock or i_resetBar or load_contoleur_emetteur or load_RTD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UART_EMETTEUR_vlg_check_tst (
	finish_shift,
	RTDV,
	TxD,
	sampler_rx
);
input  finish_shift;
input  RTDV;
input  TxD;
input sampler_rx;

reg  finish_shift_expected;
reg  RTDV_expected;
reg  TxD_expected;

reg  finish_shift_prev;
reg  RTDV_prev;
reg  TxD_prev;

reg  finish_shift_expected_prev;
reg  RTDV_expected_prev;
reg  TxD_expected_prev;

reg  last_finish_shift_exp;
reg  last_RTDV_exp;
reg  last_TxD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	finish_shift_prev = finish_shift;
	RTDV_prev = RTDV;
	TxD_prev = TxD;
end

// update expected /o prevs

always @(trigger)
begin
	finish_shift_expected_prev = finish_shift_expected;
	RTDV_expected_prev = RTDV_expected;
	TxD_expected_prev = TxD_expected;
end



// expected RTDV
initial
begin
	RTDV_expected = 1'bX;
end 

// expected TxD
initial
begin
	TxD_expected = 1'bX;
end 

// expected finish_shift
initial
begin
	finish_shift_expected = 1'bX;
end 
// generate trigger
always @(finish_shift_expected or finish_shift or RTDV_expected or RTDV or TxD_expected or TxD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected finish_shift = %b | expected RTDV = %b | expected TxD = %b | ",finish_shift_expected_prev,RTDV_expected_prev,TxD_expected_prev);
	$display("| real finish_shift = %b | real RTDV = %b | real TxD = %b | ",finish_shift_prev,RTDV_prev,TxD_prev);
`endif
	if (
		( finish_shift_expected_prev !== 1'bx ) && ( finish_shift_prev !== finish_shift_expected_prev )
		&& ((finish_shift_expected_prev !== last_finish_shift_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finish_shift :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finish_shift_expected_prev);
		$display ("     Real value = %b", finish_shift_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finish_shift_exp = finish_shift_expected_prev;
	end
	if (
		( RTDV_expected_prev !== 1'bx ) && ( RTDV_prev !== RTDV_expected_prev )
		&& ((RTDV_expected_prev !== last_RTDV_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTDV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTDV_expected_prev);
		$display ("     Real value = %b", RTDV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RTDV_exp = RTDV_expected_prev;
	end
	if (
		( TxD_expected_prev !== 1'bx ) && ( TxD_prev !== TxD_expected_prev )
		&& ((TxD_expected_prev !== last_TxD_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TxD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TxD_expected_prev);
		$display ("     Real value = %b", TxD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_TxD_exp = TxD_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UART_EMETTEUR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] data_8bits;
reg i_clock;
reg i_resetBar;
reg load_contoleur_emetteur;
reg load_RTD;
// wires                                               
wire finish_shift;
wire RTDV;
wire TxD;

wire sampler;                             

// assign statements (if any)                          
UART_EMETTEUR i1 (
// port map - connection between master ports and signals/registers   
	.data_8bits(data_8bits),
	.finish_shift(finish_shift),
	.i_clock(i_clock),
	.i_resetBar(i_resetBar),
	.load_contoleur_emetteur(load_contoleur_emetteur),
	.load_RTD(load_RTD),
	.RTDV(RTDV),
	.TxD(TxD)
);

// i_clock
always
begin
	i_clock = 1'b0;
	i_clock = #10000 1'b1;
	#10000;
end 

// i_resetBar
initial
begin
	i_resetBar = 1'b0;
	i_resetBar = #30000 1'b1;
end 

// load_contoleur_emetteur
initial
begin
	load_contoleur_emetteur = 1'b0;
	load_contoleur_emetteur = #30000 1'b1;
end 

// load_RTD
initial
begin
	load_RTD = 1'b0;
	load_RTD = #40000 1'b1;
	load_RTD = #20000 1'b0;
	load_RTD = #490000 1'b1;
	load_RTD = #20000 1'b0;
end 
// data_8bits[ 7 ]
initial
begin
	data_8bits[7] = 1'b1;
	data_8bits[7] = #520000 1'b0;
end 
// data_8bits[ 6 ]
initial
begin
	data_8bits[6] = 1'b1;
end 
// data_8bits[ 5 ]
initial
begin
	data_8bits[5] = 1'b0;
	data_8bits[5] = #520000 1'b1;
end 
// data_8bits[ 4 ]
initial
begin
	data_8bits[4] = 1'b1;
end 
// data_8bits[ 3 ]
initial
begin
	data_8bits[3] = 1'b1;
	data_8bits[3] = #520000 1'b0;
end 
// data_8bits[ 2 ]
initial
begin
	data_8bits[2] = 1'b0;
end 
// data_8bits[ 1 ]
initial
begin
	data_8bits[1] = 1'b0;
end 
// data_8bits[ 0 ]
initial
begin
	data_8bits[0] = 1'b1;
end 

UART_EMETTEUR_vlg_sample_tst tb_sample (
	.data_8bits(data_8bits),
	.i_clock(i_clock),
	.i_resetBar(i_resetBar),
	.load_contoleur_emetteur(load_contoleur_emetteur),
	.load_RTD(load_RTD),
	.sampler_tx(sampler)
);

UART_EMETTEUR_vlg_check_tst tb_out(
	.finish_shift(finish_shift),
	.RTDV(RTDV),
	.TxD(TxD),
	.sampler_rx(sampler)
);
endmodule

