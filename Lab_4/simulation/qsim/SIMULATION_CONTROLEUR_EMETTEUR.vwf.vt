// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2023 20:10:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controleur_emetteur
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controleur_emetteur_vlg_sample_tst(
	data_sent,
	i_clock,
	i_resetBar,
	load_emetteur,
	load_RTD,
	shifting_done,
	sampler_tx
);
input  data_sent;
input  i_clock;
input  i_resetBar;
input  load_emetteur;
input  load_RTD;
input  shifting_done;
output sampler_tx;

reg sample;
time current_time;
always @(data_sent or i_clock or i_resetBar or load_emetteur or load_RTD or shifting_done)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controleur_emetteur_vlg_check_tst (
	load_RDTD,
	RTDV,
	shift_droite_RDTD,
	sampler_rx
);
input  load_RDTD;
input  RTDV;
input  shift_droite_RDTD;
input sampler_rx;

reg  load_RDTD_expected;
reg  RTDV_expected;
reg  shift_droite_RDTD_expected;

reg  load_RDTD_prev;
reg  RTDV_prev;
reg  shift_droite_RDTD_prev;

reg  load_RDTD_expected_prev;
reg  RTDV_expected_prev;
reg  shift_droite_RDTD_expected_prev;

reg  last_load_RDTD_exp;
reg  last_RTDV_exp;
reg  last_shift_droite_RDTD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	load_RDTD_prev = load_RDTD;
	RTDV_prev = RTDV;
	shift_droite_RDTD_prev = shift_droite_RDTD;
end

// update expected /o prevs

always @(trigger)
begin
	load_RDTD_expected_prev = load_RDTD_expected;
	RTDV_expected_prev = RTDV_expected;
	shift_droite_RDTD_expected_prev = shift_droite_RDTD_expected;
end



// expected load_RDTD
initial
begin
	load_RDTD_expected = 1'bX;
end 

// expected RTDV
initial
begin
	RTDV_expected = 1'bX;
end 

// expected shift_droite_RDTD
initial
begin
	shift_droite_RDTD_expected = 1'bX;
end 
// generate trigger
always @(load_RDTD_expected or load_RDTD or RTDV_expected or RTDV or shift_droite_RDTD_expected or shift_droite_RDTD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected load_RDTD = %b | expected RTDV = %b | expected shift_droite_RDTD = %b | ",load_RDTD_expected_prev,RTDV_expected_prev,shift_droite_RDTD_expected_prev);
	$display("| real load_RDTD = %b | real RTDV = %b | real shift_droite_RDTD = %b | ",load_RDTD_prev,RTDV_prev,shift_droite_RDTD_prev);
`endif
	if (
		( load_RDTD_expected_prev !== 1'bx ) && ( load_RDTD_prev !== load_RDTD_expected_prev )
		&& ((load_RDTD_expected_prev !== last_load_RDTD_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load_RDTD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_RDTD_expected_prev);
		$display ("     Real value = %b", load_RDTD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_load_RDTD_exp = load_RDTD_expected_prev;
	end
	if (
		( RTDV_expected_prev !== 1'bx ) && ( RTDV_prev !== RTDV_expected_prev )
		&& ((RTDV_expected_prev !== last_RTDV_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTDV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTDV_expected_prev);
		$display ("     Real value = %b", RTDV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RTDV_exp = RTDV_expected_prev;
	end
	if (
		( shift_droite_RDTD_expected_prev !== 1'bx ) && ( shift_droite_RDTD_prev !== shift_droite_RDTD_expected_prev )
		&& ((shift_droite_RDTD_expected_prev !== last_shift_droite_RDTD_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_droite_RDTD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_droite_RDTD_expected_prev);
		$display ("     Real value = %b", shift_droite_RDTD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_shift_droite_RDTD_exp = shift_droite_RDTD_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controleur_emetteur_vlg_vec_tst();
// constants                                           
// general purpose registers
reg data_sent;
reg i_clock;
reg i_resetBar;
reg load_emetteur;
reg load_RTD;
reg shifting_done;
// wires                                               
wire load_RDTD;
wire RTDV;
wire shift_droite_RDTD;

wire sampler;                             

// assign statements (if any)                          
controleur_emetteur i1 (
// port map - connection between master ports and signals/registers   
	.data_sent(data_sent),
	.i_clock(i_clock),
	.i_resetBar(i_resetBar),
	.load_emetteur(load_emetteur),
	.load_RDTD(load_RDTD),
	.load_RTD(load_RTD),
	.RTDV(RTDV),
	.shift_droite_RDTD(shift_droite_RDTD),
	.shifting_done(shifting_done)
);

// i_clock
always
begin
	i_clock = 1'b0;
	i_clock = #25000 1'b1;
	#25000;
end 

// i_resetBar
initial
begin
	i_resetBar = 1'b0;
	i_resetBar = #70000 1'b1;
end 

// load_emetteur
initial
begin
	load_emetteur = 1'b0;
	load_emetteur = #70000 1'b1;
end 

// load_RTD
initial
begin
	load_RTD = 1'b0;
	load_RTD = #110000 1'b1;
	load_RTD = #40000 1'b0;
end 

// data_sent
initial
begin
	data_sent = 1'b0;
	data_sent = #210000 1'b1;
	data_sent = #50000 1'b0;
end 

// shifting_done
initial
begin
	shifting_done = 1'b0;
	shifting_done = #380000 1'b1;
	shifting_done = #40000 1'b0;
end 

controleur_emetteur_vlg_sample_tst tb_sample (
	.data_sent(data_sent),
	.i_clock(i_clock),
	.i_resetBar(i_resetBar),
	.load_emetteur(load_emetteur),
	.load_RTD(load_RTD),
	.shifting_done(shifting_done),
	.sampler_tx(sampler)
);

controleur_emetteur_vlg_check_tst tb_out(
	.load_RDTD(load_RDTD),
	.RTDV(RTDV),
	.shift_droite_RDTD(shift_droite_RDTD),
	.sampler_rx(sampler)
);
endmodule

